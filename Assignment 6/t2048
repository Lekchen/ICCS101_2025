# Assignment 6, Task 6
# Name: Rinchen Lekchen Gyeltshen
# Collaborators: John Nonexistent
# Time Spent: 3:00 hrs
# ----------------------------------
from typing import List, Tuple

Board = List[List[str]]

# Checks whether a given board has any
# possible move left. If no more moves,
# return True. Otherwise return False.
def isGameOver(board: Board) -> bool:
    for row in range(len(board)):
        for col in range(len(board[0]) - 1):
            if board[row][col + 1] == " " or board[row][col] == " ":
                return False
            elif board[row][col] == board[row][col + 1]:
                return False
    for row in range(len(board) - 1):
        for col in range(len(board[0])):
            if board[row + 1][col] == " " or board[row][col] == " ":
                return False
            elif board[row][col] == board[row + 1][col]:
                return False
    return True
# Returns a tuple (changed, new_board)
# where:
#  changed - a boolean indicating if
#            the board has changed.
#  new_board - the board after the user
#              presses the 'Up' key.
def doKeyUp(board: Board) -> Tuple[bool, Board]:
    check = []
    for i in board:
        check.append(i[:])
    for times in range(len(check)):  # shift all up
        for row in range(len(check) - 1):
            for col in range(len(check[0])):
                if check[row][col] == " ":
                    check[row][col] = check[row + 1][col]
                    check[row + 1][col] = " "
    for row in range(len(check) - 1, 0, -1):  # Add same num
        for col in range(len(check[0])):
            if check[row][col] == check[row - 1][col] and check[row][col] != " ":
                check[row][col] = str(int(check[row][col]) * 2)
                check[row - 1][col] = " "
    for times in range(len(check)):
        for row in range(len(check) - 1):  # Shift up once
            for col in range(len(check[0])):
                if check[row][col] == " ":
                    check[row][col] = check[row + 1][col]
                    check[row + 1][col] = " "
    return ((board != check), check)

# Returns a tuple (changed, new_board)
# where:
#  changed - a boolean indicating if
#            the board has changed.
#  new_board - the board after the user
#              presses the 'Down' key.
def doKeyDown(board: Board) -> Tuple[bool, Board]:
    check = []
    for i in board:
        check.append(i[:])
    for times in range(len(check)):  # shif all up
        for row in range(len(check) - 1, 0, -1):
            for col in range(len(check[0])):
                if check[row][col] == " ":
                    check[row][col] = check[row - 1][col]
                    check[row - 1][col] = " "
    for row in range(len(check) - 1):  # Add same num
        for col in range(len(check[0])):
            if check[row][col] == check[row + 1][col] and check[row][col] != " ":
                check[row][col] = str(int(check[row][col]) * 2)
                check[row + 1][col] = " "
    for times in range(len(check)):  # shif all up
        for row in range(len(check) - 1, 0, -1):
            for col in range(len(check[0])):
                if check[row][col] == " ":
                    check[row][col] = check[row - 1][col]
                    check[row - 1][col] = " "
    return ((board != check), check)

# Returns a tuple (changed, new_board)
# where:
#  changed - a boolean indicating if
#            the board has changed.
#  new_board - the board after the user
#              presses the 'Left' key.
def doKeyLeft(board: Board) -> Tuple[bool, Board]:
    check = []
    for i in board:
        check.append(i[:])
    for times in range(len(check[0])):  # shif all up
        for row in range(len(check)):
            for col in range(len(check[0]) - 1):
                if check[row][col] == " ":
                    check[row][col] = check[row][col + 1]
                    check[row][col + 1] = " "
    for row in range(len(check)):  # Add same num
        for col in range(len(check[0]) - 1):
            if check[row][col] == check[row][col + 1] and check[row][col] != " ":
                check[row][col] = str(int(check[row][c]) * 2)
                check[row][col + 1] = " "
    for times in range(len(check[0])):  # shif all up
        for row in range(len(check)):
            for col in range(len(check[0]) - 1):
                if check[row][col] == " ":
                    check[row][col] = check[row][col + 1]
                    check[row][col + 1] = " "
    return ((board != check), check)

# Returns a tuple (changed, new_board)
# where:
#  changed - a boolean indicating if
#            the board has changed.
#  new_board - the board after the user
#              presses the 'Right' key.
def doKeyRight(board: Board) -> Tuple[bool, Board]:
    check = []
    for i in board:
        check.append(i[:])
    for times in range(len(check[0])):  # shif all up
        for row in range(len(check)):
            for col in range(len(check[0]) - 1, 0, -1):
                if check[row][col] == " ":
                    check[row][col] = check[row][col - 1]
                    check[row][col - 1] = " "
    for row in range(len(check)):  # Add same num
        for col in range(len(check[0]) - 1, 0, -1):
            if check[row][col] == check[row][col - 1] and check[row][col] != " ":
                check[row][col] = str(int(check[row][col]) * 2)
                check[row][col - 1] = " "
    for times in range(len(check[0])):  # shif all up
        for row in range(len(check)):
            for col in range(len(check[0]) - 1, 0, -1):
                if check[row][col] == " ":
                    check[row][col] = check[row][col - 1]
                    check[row][col - 1] = " "
    return ((board != check), check)

# Returns a list of tuples (row, col)
# indicating where the empty spots are
def emptyPos(board: Board) -> List[Tuple[int, int]]:
    def emptyPos(board):
        lst = []
        for row in range(len(board)):
            for col in range(len(board[0])):
                if board[row][col] == " ":
                    lst.append((row, col))
        return lst
